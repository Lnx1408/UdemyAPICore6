-------------------------------------------------------------- Automapper --------------------------------------------------------------
NuGet Package: AutoMapper.Extensions.Microsoft.DependencyInjection
Permite mapear los atributos de nuestras clases para que mantenga un consistencia con la DB.


Una vez instalado se debe inyectar el servicio en la clase Startup, en el método ConfigureServices();


----------------------------------------------------------- DTO y Automapper -----------------------------------------------------------
Las carpetas que influyen directamente con DTO y automapper son:
*	DTOs:Se encuentran los datos de las entidades que van a interactuar directamente, por ejemplo, se omite el ID entre sus atributos 
	para el registro porque es autoincrementable.
*	Utilidades: Tiene los perfiles de automapeo, esto nos evita tener que hacer match de cada atributo entre la clase DTO y nuestra clase en entidades
*	Controllers: Se hace la transformación de clase a DTO o viceversa según la funcionalidad CRUD que se esté usando.


--------------------------------------------------------------- HTTP PATH ---------------------------------------------------------------
Permite realizar actualizaciones parciales a los datos.
Para usar el PATH se usa una nueva clase y también se instala el paquete: Microsoft.AspNetCore.Mvc.NewtonsoftJson

Hacemos el mapeo en la clase AutomapperProfiles

implementamos la funcionalidad en el controller y por último configuramos en la clase startup en el método ConfigureServices()



----------------------------------------------------- Proveedores de configuración -----------------------------------------------------

*	appsetting.json: Se usan estas configuraciones para un ambiente de producción.
*	Variables de ambiente: Aquí se recomienda colocar la cadena de conexión a la DB o servicio, ya que estas variables no son accesibles desde el codigo fuente,
	ni siquiera del appsetting.json. Pueden ser accedidas usando el IConfiguration. (Clic derecho sobre el nombre del proyecto/debug/variables)
*	User Secrets: No estan prewsentes en ninguna parte del código, ni ficheros. Además de que solo van a afectar al ambiente de desaarrollo. 
		(Clic derechio sobre el nombre del protyecto/ administrar secretos de usuario)
*	CommandLine: Se ejecuta desde la terminal con la ruta del proyecto donde se encuentra el archivo .csproj, con el comando dotnet run --"atributo = valor del atributo" 

Nota: Los proveedores de configuración tienen un orden, por lo tanto si hay una variable con el mismo nombre en diferente proveedor, se tomará el de mayor prioridad.
Prioridad:
	0.- CommandLine
	1.-	EnviromentVariables
	2.- UserSecrets
	3.- appsettings

Recomendación: Podemos usar variables de ambiente para guardar nuestro connectionString o algún tipo de dato sensible.

--------------------------------------------------------------- Autenticación ---------------------------------------------------------------
Esquemas:
	*	Anónimo: Cualquiera puede acceder a los endpoints. El que se usa por defecto.
	*	Basic: El password se convierte en byte64, pero no es tan seguro, a menos que se use ssl.
	*	Bearer: Esquema basado en token.
----------------------------------------------------------------- Identity -----------------------------------------------------------------
1.	Instalar el paquete: Microsoft.AspNetCore.Identity.EntityFrameworkCore

2.	En la consola de administrador de paquetes ingresamos el comando Add-Migration SistemaUsuarios y actualizamos la DB (Update-Database).

3.	Configurar los servicios en la clase startup

4.	Crear las clases en el DTOs (RespuestaAutenticacion, CredencialesUsuario)

5.	Configuramos los controllers respectivos de las clases previas

6.	Configuramos los servicios de Jwt y AddSwaggerGen  en Startup



Mota: Si tenemos el tag [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)] de forma global (antes de la clase), 
todos los endpoint van a pedir autenticación, pero se pueden crear excepciones con la etiqueta [AllowAnonymous] en cada método que no requiera explícitamente la autorización.


Nota: en la página https://jwt.io/ podemos conocer los detalles de nuestro token.





------------------------------------------------------ Autorización basada en claims -------------------------------------------------------

Se configura en los servicios de la clase Startup


------------------------------------------------------------------ LogOut ------------------------------------------------------------------

Por defecto no se realiza acción alguna en el Web API, se puede borrar el token desde el cliente

------------------------------------------------------------------- CORS -------------------------------------------------------------------
Permite tener acceso a nuestras APIS desde diferentes origenes => Esquema URI + nombre del host + # de puerto
Con CORS se habilita el intercambio de recursos de origenes cruzados para permitir peticiones desde otros orígenes hacia el web API
Configurar esto solo sirve para Navegadores, si se trata de dispositivos móviles no es necesario configurarlo.
Se configuran dentro de la clase startup.

Con la página https://apirequest.io/ puedes probar tus APIS, simulando peticiones desde sitios externos.

------------------------------------------------------------ Protección de datos -----------------------------------------------------------
IDataProtectionProvider, IDataProtector, permiten encriptar y desencriptar información (Ejemplo en clase cuentaController)

----------------------------------------------------------------- Hashes -------------------------------------------------------------------
Este algoritmo permite cifrar un mensaje, pero no su desencriptación, es usada para verificar passwords comprobando el input con un hash
Hace uso de SAL, un valor aleatorio que se anexa al testo plano al que se le aplicará el hash.

Nota: en caso de que se vaya a guardar el hash, es necesario almacenar también la SAL relacioanda a este. 


